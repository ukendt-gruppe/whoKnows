name: Continuous Delivery and Deployment

on:
  push:
    branches: [ feature/dbsetup-production ]
  pull_request:
    branches: [ feature/dbsetup-production ]
  workflow_dispatch:

env:
  CR_PAT: ${{ secrets.CR_PAT }}
  DOCKER_GITHUB_USERNAME: ${{ secrets.DOCKER_GITHUB_USERNAME }}
  ENV_GREETING: ${{ secrets.ENV_GREETING }}
  DATABASE_URL: ${{ secrets.DATABASE_URL }}

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    steps:
      - name: Check Out Repository
        uses: actions/checkout@v3

      - name: Log in to GitHub Container Registry
        run: echo ${{ env.CR_PAT }} | docker login ghcr.io -u ${{ env.DOCKER_GITHUB_USERNAME }} --password-stdin

      - name: Build and Push Docker Images
        working-directory: ./src
        run: |
          docker compose -f docker-compose.prod.yml build
          docker compose -f docker-compose.prod.yml push

  deploy:
    needs: build-and-push
    runs-on: ubuntu-latest
    env:
      SSH_USER: ${{ secrets.SSH_USER }}
      SSH_HOST: ${{ secrets.SSH_HOST }}

    steps:
      - name: Check Out Repository
        uses: actions/checkout@v3

      - name: Add SSH key to runner
        run: |
          mkdir -p ~/.ssh/
          echo "${{ secrets.SSH_PRIVATE_KEY }}" > ~/.ssh/ssh_key
          chmod 600 ~/.ssh/ssh_key

      - name: Create .env file
        run: |
          echo "WEATHER_API_KEY=${{ secrets.WEATHER_API_KEY }}" >> .env
          echo "ENV_GREETING=${{ secrets.ENV_GREETING }}" >> .env
          echo "DATABASE_URL=${{ secrets.DATABASE_URL }}" >> .env

      - name: Transfer files to server
        run: |
          # Create necessary directories
          ssh -i ~/.ssh/ssh_key -o StrictHostKeyChecking=no $SSH_USER@$SSH_HOST '
            mkdir -p frontend/templates frontend/static network/monitoring && \
            mkdir -p internal/db && \
            rm -f docker-compose.yml .env
          '
          
          # Transfer files
          scp -i ~/.ssh/ssh_key -o StrictHostKeyChecking=no .env $SSH_USER@$SSH_HOST:.env
          scp -i ~/.ssh/ssh_key -o StrictHostKeyChecking=no src/docker-compose.server.yml $SSH_USER@$SSH_HOST:docker-compose.yml
          scp -i ~/.ssh/ssh_key -o StrictHostKeyChecking=no src/frontend/templates/* $SSH_USER@$SSH_HOST:frontend/templates/
          scp -i ~/.ssh/ssh_key -o StrictHostKeyChecking=no src/frontend/static/* $SSH_USER@$SSH_HOST:frontend/static/
          scp -i ~/.ssh/ssh_key -o StrictHostKeyChecking=no src/network/nginx.conf $SSH_USER@$SSH_HOST:network/
          scp -i ~/.ssh/ssh_key -o StrictHostKeyChecking=no src/network/ssl-init.sh $SSH_USER@$SSH_HOST:network/
          scp -i ~/.ssh/ssh_key -o StrictHostKeyChecking=no src/network/monitoring/collect_metrics.sh $SSH_USER@$SSH_HOST:network/monitoring/collect_metrics.sh
          scp -i ~/.ssh/ssh_key -o StrictHostKeyChecking=no src/network/monitoring/show_metrics.sh $SSH_USER@$SSH_HOST:network/monitoring/show_metrics.sh
          scp -i ~/.ssh/ssh_key -o StrictHostKeyChecking=no src/network/monitoring/prometheus.yml $SSH_USER@$SSH_HOST:prometheus.yml

          # Verify files exist (updated to check specific files)
          ssh -i ~/.ssh/ssh_key -o StrictHostKeyChecking=no $SSH_USER@$SSH_HOST '
            echo "Checking transferred files:" && \
            ls -la network/monitoring/collect_metrics.sh
          '
      
      - name: Deploy to server
        run: |
          ssh -i ~/.ssh/ssh_key -o StrictHostKeyChecking=no $SSH_USER@$SSH_HOST "
            docker compose pull && \
            docker compose up -d
          "
