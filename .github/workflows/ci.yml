name: Continuous Integration

on:
  push:
    branches:
      - '**'
  pull_request:
    branches:
      - '**'

jobs:

  test:
    name: Test and Coverage
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: '1.23.1' 
        
    - name: Install dependencies
      run: |
        cd src/backend
        go mod download

    - name: Run tests with coverage
      run: |
        cd src/backend/internal/handlers
        go test -v -coverprofile=coverage.out .
        go tool cover -func=coverage.out

    - name: Generate coverage report
      run: |
        cd src/backend/internal/handlers
        go tool cover -html=coverage.out -o coverage.html

    - name: Archive code coverage results
      uses: actions/upload-artifact@v4
      with:
        name: code-coverage-report
        path: src/backend/internal/handlers/coverage.html

    - name: Display coverage percentage
      run: |
        cd src/backend/internal/handlers
        COVERAGE=$(go tool cover -func=coverage.out | grep total | awk '{print $3}')
        echo "Total coverage: $COVERAGE"
        echo "COVERAGE=$COVERAGE" >> $GITHUB_ENV

    - name: Create Coverage Badge
      run: |
        COVERAGE="${{ env.COVERAGE }}"
        COLOR=$(awk -v cov="${COVERAGE%\%}" 'BEGIN { if (cov >= 80) print "brightgreen"; else if (cov >= 70) print "green"; else if (cov >= 60) print "yellowgreen"; else if (cov >= 50) print "yellow"; else if (cov >= 40) print "orange"; else print "red" }')
        JSON="{\"schemaVersion\": 1, \"label\": \"coverage\", \"message\": \"$COVERAGE\", \"color\": \"$COLOR\"}"
        echo "$JSON" > coverage-badge.json
        GIST_CONTENT=$(jq -Rs . < coverage-badge.json)
        curl -X PATCH \
          -H "Authorization: token ${{ secrets.GIST_SECRET }}" \
          -H "Accept: application/vnd.github.v3+json" \
          -H "Content-Type: application/json" \
          -d "{\"files\": {\"go-coverage.json\": {\"content\": $GIST_CONTENT}}}" \
          https://api.github.com/gists/44e7725b61d78d612fa0ee53b3437c78
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    - name: Verify Gist Update
      run: |
        sleep 5  # Give GitHub some time to update
        curl -H "Authorization: token ${{ secrets.GIST_SECRET }}" \
            -H "Accept: application/vnd.github.v3+json" \
            https://api.github.com/gists/44e7725b61d78d612fa0ee53b3437c78
 
  lint:
    name: Lint
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: '1.23.1'

    - name: Find and verify Dockerfiles
      id: find-dockerfiles
      run: |
        # Find all Dockerfiles and store in a variable
        DOCKERFILES=$(find . -type f -name "Dockerfile*")
        
        # Print found Dockerfiles for debugging
        echo "Found Dockerfiles:"
        echo "$DOCKERFILES"
        
        # Verify files exist and create space-separated list
        DOCKERFILE_LIST=""
        for file in $DOCKERFILES; do
          if [ -f "$file" ]; then
            DOCKERFILE_LIST="$DOCKERFILE_LIST $file"
          fi
        done
        
        # Trim leading space and store in output
        DOCKERFILE_LIST="$(echo -e "${DOCKERFILE_LIST}" | sed -e 's/^[[:space:]]*//')"
        echo "dockerfiles=$DOCKERFILE_LIST" >> $GITHUB_OUTPUT
        
        # Print final list for verification
        echo "Final Dockerfile list:"
        echo "$DOCKERFILE_LIST"

    - name: Lint Dockerfiles
      if: steps.find-dockerfiles.outputs.dockerfiles != ''
      uses: hadolint/hadolint-action@v3.1.0
      with:
        dockerfile: ${{ steps.find-dockerfiles.outputs.dockerfiles }}