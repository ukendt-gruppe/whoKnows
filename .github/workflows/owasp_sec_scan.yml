name: OWASP Security Scan

on:
  push:
    branches: [ feature/owasp-sec-scan ]
  pull_request:
    branches: [ feature/owasp-sec-scan ]

permissions:
  contents: read
  issues: write
  security-events: write

jobs:
  owasp-zap:
    name: OWASP ZAP Mini-mock Scan
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.23.1'
          
      - name: Install dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y gcc musl-dev sqlite3
          go mod download
        working-directory: src/backend

      - name: Create mock environment
        run: |
          echo "ENV_GREETING=test" > .env
          echo "DATABASE_URL=file::memory:?cache=shared" >> .env
          echo "WEATHER_API_KEY=dummy-key" >> .env
        working-directory: src/backend

      - name: Build application
        run: |
          CGO_ENABLED=1 GOOS=linux go build -o whoknows
        working-directory: src/backend

      - name: Copy frontend templates
        run: |
          mkdir -p frontend/templates
          cp -r ../frontend/templates/* frontend/templates/
        working-directory: src/backend

      - name: Start the application
        run: |
          ./whoknows &
          echo $! > ./pid.file
          # Wait for the port to be available
          timeout 30 bash -c 'while ! nc -z localhost 8080; do sleep 1; done'
        working-directory: src/backend

      - name: ZAP Full Scan
        uses: zaproxy/action-full-scan@v0.10.0
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          target: 'http://localhost:8080'
          cmd_options: '-a'
          allow_issue_writing: true
          issue_title: 'OWASP ZAP Security Report'
          fail_action: false  # Don't fail the build if vulnerabilities are found

      - name: Upload ZAP Report
        uses: actions/upload-artifact@v4
        with:
          name: zap-scan-report
          path: |
            zap-scan.html
            zap-scan.json

      - name: Cleanup
        if: always()
        run: |
          if [ -f ./pid.file ]; then
            kill $(cat ./pid.file) || true
          fi
        working-directory: src/backend

  docker_scan:
    name: Docker Security Scan
    runs-on: ubuntu-latest
    
    steps:
      - uses: actions/checkout@v4

      - name: Build backend image
        run: |
          cd src/backend
          docker build -t backend:test -f Dockerfile.prod .

      - name: Run Trivy vulnerability scanner - Backend
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: 'backend:test'
          format: 'table'
          severity: 'CRITICAL,HIGH'
          exit-code: '1'
          ignore-unfixed: true

      - name: Build nginx image
        run: |
          cd src/network
          docker build -t nginx:test -f Dockerfile.nginx .

      - name: Run Trivy vulnerability scanner - Nginx
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: 'nginx:test'
          format: 'table'
          severity: 'CRITICAL,HIGH'
          exit-code: '1'
          ignore-unfixed: true

  dependency_check:
    name: OWASP Dependency Check
    runs-on: ubuntu-latest
    
    steps:
      - uses: actions/checkout@v4

      - name: OWASP Dependency Check
        uses: dependency-check/Dependency-Check_Action@main
        with:
          project: 'WhoKnows'
          path: 'src/backend'
          format: 'HTML'
          out: 'reports'

      - name: Upload dependency check report
        uses: actions/upload-artifact@v4
        with:
          name: dependency-check-report
          path: reports
